@mixin border-radius ($radius: 4px) {
	border-radius			: $radius;
	-moz-border-radius		: $radius;
	-webkit-border-radius	: $radius;
}
@mixin border-radius-all ($topleft: 4px, $topright: 4px, $bottomright: 4px, $bottomleft: 4px) {
	border-radius			: $topleft $topright $bottomright $bottomleft;
	-moz-border-radius		: $topleft $topright $bottomright $bottomleft;
	-ms-border-radius		: $topleft $topright $bottomright $bottomleft;
	-o-border-radius		: $topleft $topright $bottomright $bottomleft;
	-webkit-border-radius	: $topleft $topright $bottomright $bottomleft;
}

@mixin opacity ($opacity: 0.5) {
	$ieOpacity			: $opacity * 100;
	opacity				: $opacity;
	-moz-opacity		: $opacity;
	-webkit-opacity		: $opacity;
	-ms-filter			: progid:DXImageTransform.Microsoft.Alpha(opacity=#{$ieOpacity}); /* IE 8 */
	filter				: alpha(opacity = #{$ieOpacity}); /* IE 5-7 */
}

@mixin background-alpha($color, $alpha) {
	$acolor			: hsla(hue($color), saturation($color), lightness($color), $alpha);
	$iecolor 		: argb($acolor);

	background-color	: $color; /* fallback color */
	background-color	: $acolor;

	/* IE */
	background-color	: transparent\9;
	filter				: progid:DXImageTransform.Microsoft.gradient(startColorstr= #{$iecolor}, endColorstr= #{$iecolor});
	zoom:1; 
}

@mixin box-shadow ($x-size:10px, $y-size:10px, $blur:5px, $color: $black, $spread:0) {
	box-shadow			: $x-size $y-size $blur $spread $color;
	-moz-box-shadow		: $x-size $y-size $blur $spread $color;
	-webkit-box-shadow	: $x-size $y-size $blur $spread $color;
}
@mixin box-shadow-inset ($x-size: 10px, $y-size: 10px, $blur: 5px, $color: $black, $spread:0) {
	box-shadow			: inset $x-size $y-size $blur $spread $color;
	-moz-box-shadow		: inset $x-size $y-size $blur $spread $color;
	-webkit-box-shadow	: inset $x-size $y-size $blur $spread $color;
}

@mixin gradient-vertical ($firstColor: #FFF, $secondColor: #DDD) {
	background	: $firstColor; /* Fallback solid color for old browsers */
	background	: linear-gradient(to bottom, $firstColor 0%, $secondColor 100%); /* W3C */
	background	: -moz-linear-gradient(top, $firstColor 0%, $secondColor 100%); /* FF 3.6+ */
	background	: -ms-linear-gradient(top, $firstColor 0%, $secondColor 100%); /* IE 10+ */
	background	: -o-linear-gradient(top, $firstColor 0%, $secondColor 100%); /* Opera 11.10+ */
	background	: -webkit-linear-gradient(top, $firstColor 0%,$secondColor 100%); /* Chrome 10+, Safari 5.1+ */
	background	: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$firstColor), color-stop(100%,$secondColor)); /* Chrome, Safari 4+ */
	filter		: progid:DXImageTransform.Microsoft.gradient(startColorstr= '#{$firstColor}', endColorstr= '#{$secondColor}', GradientType=0); /* IE 6-9 */
}

@mixin gradient-horizontal ($firstColor: #FFF, $secondColor: #DDD) {
	background	: $firstColor; /* Fallback solid color for old browsers */
	background	: linear-gradient(to right, $firstColor 0%, $secondColor 100%); /* W3C */
	background	: -moz-linear-gradient(left,  $firstColor 0%, $secondColor 100%); /* FF 3.6+ */
	background	: -ms-linear-gradient(left, $firstColor 0%, $secondColor 100%); /* IE 10+ */
	background	: -o-linear-gradient(left, $firstColor 0%, $secondColor 100%); /* Opera 11.10+ */
	background	: -webkit-linear-gradient(left,  $firstColor 0%,$secondColor 100%); /* Chrome 10+, Safari 5.1+ */
	background	: -webkit-gradient(linear, left top, right top, color-stop(0%,$firstColor), color-stop(100%,$secondColor)); /* Chrome, Safari 4+ */
	filter		: progid:DXImageTransform.Microsoft.gradient(startColorstr= '#{$firstColor}', endColorstr= '#{$secondColor}', GradientType=1); /* IE 6-9 */
}

@mixin transition ($type:all, $time:0.2s, $ease:ease) {
    transition			: $type $time $ease;
    -moz-transition		: $type $time $ease;
    -webkit-transition	: $type $time $ease;
    -o-transition		: $type $time $ease;
}

@mixin animation ($name, $duration: 300ms, $delay: 0, $ease: ease) {
	-moz-animation		: $name, $duration, $delay, $ease;
	-ms-animation		: $name, $duration, $delay, $ease;
	-webkit-animation	: $name, $duration, $delay, $ease;
}

@mixin transform ($deg) {
	transform			: $deg;
	-moz-transform		: $deg;
	-ms-transform		: $deg;
	-o-transform		: $deg;
	-webkit-transform	: $deg;
}

@mixin scale ($multiplier) {
	transform			: scale($multiplier);
	-moz-transform		: scale($multiplier);
	-ms-transform		: scale($multiplier);
	-o-transform		: scale($multiplier);
	-webkit-transform	: scale($multiplier);
}

@mixin rotate ($deg) {
	-moz-transform		: rotate($deg);
	-ms-transform		: rotate($deg);
	-o-transform		: rotate($deg);
	-webkit-transform	: rotate($deg);
}

@mixin skew ($deg, $deg2) {
	transform			: skew($deg, $deg2);
	-moz-transform		: skew($deg, $deg2);
	-ms-transform		: skew($deg, $deg2);
	-o-transform		: skew($deg, $deg2);
	-webkit-transform	: skew($deg, $deg2);
}

@mixin font($fontName) {
	@font-face	{
	    font-family: "#{$fontName}";
		src: url("fonts/#{$fontName}/#{$fontName}.eot");
		src: url("fonts/#{$fontName}/#{$fontName}.eot?#iefix") format("embedded-opentype"),
		     url("fonts/#{$fontName}/#{$fontName}.woff") format("woff"),
		     url("fonts/#{$fontName}/#{$fontName}.ttf") format("truetype"),
		     url("fonts/#{$fontName}/#{$fontName}.svg#svgFontName") format("svg");
	}
}

@mixin flexbox {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
}

%flexbox { @include flexbox; }

@mixin inline-flex {
	display: -webkit-inline-box;
	display: -webkit-inline-flex;
	display: -moz-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}

%inline-flex { @include inline-flex; }

@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}

// Shorter version:
@mixin flex-dir($args...) { @include flex-direction($args...); }

@mixin flex-wrap($value: nowrap) {
    // No Webkit Box fallback.
    -webkit-flex-wrap: $value;
    -moz-flex-wrap: $value;
    @if $value == nowrap {
        -ms-flex-wrap: none;
    } @else { 
        -ms-flex-wrap: $value; 
    }
    flex-wrap: $value;
}

@mixin flex-flow($values: (row nowrap)) {
	// No Webkit Box fallback.
	-webkit-flex-flow: $values;
	-moz-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}

@mixin order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	-webkit-order: $int;
	-moz-order: $int;
	-ms-flex-order: $int;
	order: $int;
}

@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}

@mixin flex-shrink($int: 1) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex-negative: $int;
	flex-shrink: $int;
}

@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	-moz-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;
}

@mixin flex($fg: 1, $fs: null, $fb: null) {
    
	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}

	-webkit-box-flex: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-moz-box-flex: $fg-boxflex;
	-moz-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}

@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;		
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}

// Shorter version:
@mixin flex-just($args...) { @include justify-content($args...); }

@mixin align-items($value: stretch) {
    @if $value == flex-start {
        -webkit-box-align: start;
        -ms-flex-align: start;
    } @else if $value == flex-end {
        -webkit-box-align: end;
        -ms-flex-align: end;
    } @else {
        -webkit-box-align: $value;
        -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
    -moz-align-items: $value;
    align-items: $value;
}

@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	-moz-align-self: $value;
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} @else if $value == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}

@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content: $value;
	-moz-align-content: $value;
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	} @else if $value == flex-end {
		-ms-flex-line-pack: end;
	} @else {
		-ms-flex-line-pack: $value;
	}
	align-content: $value;
}